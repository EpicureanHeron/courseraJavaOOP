#BlueJ class context
comment0.target=VigenereBreaker
comment1.params=message\ whichSlice\ totalSlices
comment1.target=java.lang.String\ sliceString(java.lang.String,\ int,\ int)
comment1.text=\r\n\ Write\ the\ public\ method\ sliceString,\ which\ has\ three\ parameters\u2014a\ String\ message,\ \r\n\ representing\ the\ encrypted\ message,\ an\ integer\ whichSlice,\ indicating\ the\ index\ \r\n\ the\ slice\ should\ start\r\n\ from,\ and\ an\ integer\ totalSlices,\ indicating\ the\ length\ of\ the\ key.\ This\ method\ returns\ \r\n\ a\ String\ consisting\ of\ every\ totalSlices-th\ character\ from\ message,\ starting\ at\ the\ \r\n\ whichSlice-th\ character.\r\n
comment10.params=encrypted\ languages
comment10.target=java.lang.String\ breakForAllLangs(java.lang.String,\ java.util.HashMap)
comment10.text=\r\n\ \ \ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ breakForAllLangs,\ which\ has\ two\ parameters\u2014a\ String\ encrypted,\ and\ a\ HashMap,\ \r\n\ \ \ called\ languages,\ mapping\ a\ String\ representing\ the\ name\ of\ a\ language\ to\ a\ HashSet\ of\ Strings\ containing\ the\ words\ in\ that\ language.\r\n\ \ \ Try\ breaking\ the\ encryption\ for\ each\ language,\ and\ see\ which\ gives\ the\ best\ results\!\ Remember\ that\ you\ can\ iterate\ over\ the\ languages.keySet()\r\n\ \ \ to\ get\ the\ name\ of\ each\ language,\ and\ then\ you\ can\ use\ .get()\ to\ look\ up\ the\ corresponding\ dictionary\ for\ that\ language.\ You\ will\ want\ to\ use\ the\ \r\n\ \ \ breakForLanguage\ and\ countWords\ methods\ that\ you\ already\ wrote\ to\ do\ most\ of\ the\ work\ (it\ is\ slightly\ inefficient\ to\ re-count\r\n\ \ \ the\ words\ here,\ but\ it\ is\ simpler,\ and\ the\ inefficiency\ is\ not\ significant).\ You\ will\ want\ to\ print\ out\ the\ decrypted\ message\ as\ well\ as\ the\ language\r\n\ \ \ that\ you\ identified\ for\ the\ message.\r\n
comment2.params=encrypted\ klength\ mostCommon
comment2.target=int[]\ tryKeyLength(java.lang.String,\ int,\ char)
comment2.text=\r\n\ Write\ the\ public\ method\ tryKeyLength,\ which\ takes\ three\ parameters\u2014a\ String\ encrypted\ \r\n\ that\ represents\ the\ encrypted\ message,\ an\ integer\ klength\ that\ represents\ the\ key\ length,\ \r\n\ and\ a\ character\ mostCommon\ that\ indicates\ the\ most\ common\ character\ in\ the\ language\ of\ the\ message.\ \r\n\ This\ method\ should\ make\ use\ of\ the\ CaesarCracker\ class,\ as\ well\ as\ the\ sliceString\ method,\ to\ find\ \r\n\ the\ shift\ for\ each\ index\ in\ the\ key.\ You\ should\ fill\ in\ the\ key\ (which\ is\ an\ array\ of\ integers)\ and\ return\ it.\ \r\n\ Test\ this\ method\ on\ the\ text\ file\ athens_keyflute.txt,\ which\ is\ a\ scene\ from\ A\ Midsummer\ Night\u2019s\ Dream\ encrypted\r\n\ with\ the\ key\ \u201Cflute\u201D,\ and\ make\ sure\ you\ get\ the\ key\ {5,\ 11,\ 20,\ 19,\ 4}.\r\n
comment3.params=
comment3.target=void\ breakVigenere()
comment3.text=\r\n\ \ \ \ \ \r\n\ \ \ \ \ Create\ a\ new\ FileResource\ using\ its\ default\ constructor\ (which\ displays\ a\ dialog\ for\ you\ to\ select\ a\ file\ to\ decrypt).\r\n\r\n\ \ \ \ Use\ the\ asString\ method\ to\ read\ the\ entire\ contents\ of\ the\ file\ into\ a\ String.\r\n\r\n\ \ \ \ Use\ the\ tryKeyLength\ method,\ which\ you\ just\ wrote,\ to\ find\ the\ key\ for\ the\ message\ you\ read\ in.\ For\ now,\ you\ should\ just\ pass\ \u2018e\u2019\ for\ mostCommon.\r\n\r\n\ \ \ \ You\ should\ create\ a\ new\ VigenereCipher,\ passing\ in\ the\ key\ that\ tryKeyLength\ found\ for\ you.\r\n\r\n\ \ \ \ You\ should\ use\ the\ VigenereCipher\u2019s\ decrypt\ method\ to\ decrypt\ the\ encrypted\ message.\r\n\r\n\ \ \ \ Finally,\ you\ should\ print\ out\ the\ decrypted\ message\!\r\n
comment4.params=fr
comment4.target=java.util.HashSet\ readDictionary(edu.duke.FileResource)
comment4.text=\r\n\ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ readDictionary,\ \r\n\ which\ has\ one\ parameter\u2014a\ FileResource\ fr.\ This\ method\ should\ first\ make\ \r\n\ a\ new\ HashSet\ of\ Strings,\ then\ read\ each\ line\ in\ fr\ (which\ should\ contain\ exactly\ \r\n\ one\ word\ per\ line),\ convert\ that\ line\ to\ lowercase,\ and\ put\ that\ line\ into\ the\ HashSet\ \r\n\ that\ you\ created.\ The\ method\ should\ then\ return\ the\ HashSet\ representing\ the\ words\ in\ a\ dictionary.\r\n\ All\ the\ dictionary\ files,\ including\ the\ English\ dictionary\ file,\ are\ included\ in\ the\ starter\ program\ you\ download.\r\n\ They\ are\ inside\ the\ folder\ called\ \u2018dictionaries\u2019.\r\n
comment5.params=
comment5.target=void\ testreadDictionary()
comment6.params=message\ dictionary
comment6.target=int\ countWords(java.lang.String,\ java.util.HashSet)
comment6.text=\r\n\ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ countWords,\ which\ has\ two\ parameters\u2014a\ String\ message,\ \r\n\ and\ a\ HashSet\ of\ Strings\ dictionary.\ This\ method\ should\ split\ the\ message\ into\ words\ (use\ .split(\u201C\\\\W+\u201D),\ which\r\n\ returns\ a\ String\ array),\ iterate\ over\ those\ words,\ and\ see\ how\ many\ of\ them\ are\ \u201Creal\ words\u201D\u2014that\ is,\ how\ many\r\n\ appear\ in\ the\ dictionary.\ Recall\ that\ the\ words\ in\ dictionary\ are\ lowercase.\ This\ method\ should\ return\ the\ integer\r\n\ count\ of\ how\ many\ valid\ words\ it\ found.\r\n
comment7.params=
comment7.target=void\ testCountWords()
comment8.params=encrypted\ dictionary\ mostCommon
comment8.target=java.lang.String\ breakForLanguage(java.lang.String,\ java.util.HashSet,\ char)
comment8.text=\r\n\ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ breakForLanguage,\ which\ has\ two\ \r\n\ parameters\u2014a\ String\ encrypted,\ and\ a\ HashSet\ of\ Strings\ dictionary.\ This\ method\ should\ \r\n\ try\ all\ key\ lengths\ from\ 1\ to\ 100\ (use\ your\ tryKeyLength\ method\ to\ try\ one\ particular\ key\ length)\ \r\n\ to\ obtain\ the\ best\ decryption\ for\ each\ key\ length\ in\ that\ range.\ For\ each\ key\ length,\ your\ method\ \r\n\ should\ decrypt\ the\ message\ (using\ VigenereCipher\u2019s\ decrypt\ method\ as\ before),\ and\ count\ how\ many\ of\ \r\n\ the\ \u201Cwords\u201D\ in\ it\ are\ real\ words\ in\ English,\ based\ on\ the\ dictionary\ passed\ in\ (use\ the\ countWords\ \r\n\ method\ you\ just\ wrote).\ This\ method\ should\ figure\ out\ which\ decryption\ gives\ the\ largest\ count\ of\ real\ \r\n\ words,\ and\ return\ that\ String\ decryption.\ Note\ that\ there\ is\ nothing\ special\ about\ 100;\ we\ will\ just\ give\ \r\n\ you\ messages\ with\ key\ lengths\ in\ the\ range\ 1\u2013100.\ If\ you\ did\ not\ have\ this\ information,\ you\ could\ iterate\ \r\n\ all\ the\ way\ to\ encrypted.length().\ Your\ program\ would\ just\ take\ a\ bit\ longer\ to\ run.\r\n
comment9.params=dictionary
comment9.target=char\ mostCommonCharIn(java.util.HashSet)
comment9.text=\r\n\ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ mostCommonCharIn,\ which\ has\ one\ parameter\u2014a\ HashSet\ \r\n\ of\ Strings\ dictionary.\ This\ method\ should\ find\ out\ which\ character,\ of\ the\ letters\ in\ the\ English\ alphabet,\ \r\n\ appears\ most\ often\ in\ the\ words\ in\ dictionary.\ It\ should\ return\ this\ most\ commonly\ occurring\ character.\ Remember\ \r\n\ that\ you\ can\ iterate\ over\ a\ HashSet\ of\ Strings\ with\ a\ for-each\ style\ for\ loop.\r\n
numComments=11
