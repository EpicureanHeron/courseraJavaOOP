#BlueJ class context
comment0.target=decryptCaesar
comment1.params=encrypted
comment1.target=java.lang.String\ decrypt(java.lang.String)
comment1.text=\r\n\ Complete\ the\ decryption\ method\ shown\ in\ the\ lesson\ by\ creating\ a\ CaesarBreaker\ class\ with\ the\ methods\ countLetters,\ maxIndex,\ and\ decrypt.\ \r\n\ Recall\ that\ the\ decrypt\ method\ creates\ a\ CaesarCipher\ object\ in\ order\ to\ use\ the\ \r\n\ encrypt\ method\ you\ wrote\ for\ the\ last\ lesson.\ Make\ sure\ that\ your\ CaesarCipher\ class\ is\ in\ the\ same\ folder\ as\ CaesarBreaker\!\ \r\n\ You\ may\ want\ to\ use\ the\ following\ code\ as\ part\ of\ your\ decrypt\ method.\r\n
comment2.params=counts
comment2.target=int\ maxIndex(int[])
comment3.params=message
comment3.target=int[]\ countLetters(java.lang.String)
comment4.params=
comment4.target=void\ testDecrypt()
comment5.params=message\ start
comment5.target=java.lang.String\ halfOfString(java.lang.String,\ int)
comment5.text=\r\nWrite\ the\ method\ halfOfString\ in\ the\ CaesarBreaker\ class\ that\ has\ two\ parameters,\ a\ String\ parameter\ named\ message\ and\ an\ int\ parameter\ named\ start.\ \r\nThis\ method\ should\ return\ a\ new\ String\ that\ is\ every\ other\ character\ from\ message\ starting\ with\ the\ start\ position.\ \r\nFor\ example,\ the\ call\ halfOfString(\u201CQbkm\ Zgis\u201D,\ 0)\ returns\ the\ String\ \u201CQk\ gs\u201D\ and\ the\ call\ halfOfString(\u201CQbkm\ Zgis\u201D,\ 1)\r\n\ returns\ the\ String\ \u201CbmZi\u201D.\ Be\ sure\ to\ test\ this\ method\ with\ a\ small\ example.\r\n
comment6.params=
comment6.target=void\ testhalfOfString()
comment7.params=s
comment7.target=int\ getKey(java.lang.String)
comment7.text=\r\n\ Write\ the\ method\ getKey\ in\ the\ CaesarBreaker\ class\ that\ has\ one\ parameter,\ a\ String\ s.\ This\ method\ should\ call\ countLetters\ to\ get\ an\ array\ of\ the\ letter\ \r\n\ frequencies\ in\ String\ s\ and\ then\ use\ maxIndex\ to\ calculate\ the\ index\ of\ the\ largest\ letter\ frequency,\ which\ is\ the\ location\ of\ the\ encrypted\ letter\ \u2018e\u2019,\ \r\n\ which\ leads\ to\ the\ key,\ which\ is\ returned.\r\n
comment8.params=encrypted
comment8.target=void\ decryptTwoKeys(java.lang.String)
comment8.text=\r\n\ \ \ \ \ Write\ the\ method\ decryptTwoKeys\ in\ the\ CaesarBreaker\ class\ that\ has\ one\ parameter,\ a\ String\ parameter\ named\ encrypted\ that\ represents\ a\ \r\n\ \ \ \ \ String\ that\ was\ encrypted\ with\ the\ two\ key\ algorithm\ discussed\ in\ the\ previous\ lesson.\ This\ method\ attempts\ to\ determine\ the\ two\ keys\ used\r\n\ \ \ \ \ to\ encrypt\ the\ message,\ prints\ the\ two\ keys,\ and\ then\ returns\ the\ decrypted\ String\ with\ those\ two\ keys.\ More\ specifically,\ this\ method\ should\:\r\n\r\n\ \ \ \ \ \ \ \ -\ Calculate\ a\ String\ of\ every\ other\ character\ starting\ with\ the\ first\ character\ of\ the\ encrypted\ String\ by\ calling\ halfOfString.\ \r\n\r\n\ \ \ \ \ \ \ \ -\ Calculate\ a\ String\ of\ every\ other\ character\ starting\ with\ the\ second\ character\ of\ the\ encrypted\ String.\ \r\n\r\n\ \ \ \ \ \ \ \ -\ Then\ calculate\ the\ key\ used\ to\ encrypt\ each\ half\ String.\r\n\r\n\ \ \ \ \ \ \ \ -\ You\ should\ print\ the\ two\ keys\ found.\r\n\r\n\ \ \ \ \ \ \ \ -\ Calculate\ and\ return\ the\ decrypted\ String\ using\ the\ encryptTwoKeys\ method\ from\ your\ CaesarCipher\ class,\ \r\n\ \ \ \ \ \ \ \ again\ making\ sure\ it\ is\ in\ the\ same\ folder\ as\ your\ CaesarBreaker\ class.\r\n\r\n\r\n
comment9.params=
comment9.target=void\ testDecryptTwoKeys()
numComments=10
