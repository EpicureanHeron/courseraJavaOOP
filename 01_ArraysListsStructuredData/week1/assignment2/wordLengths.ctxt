#BlueJ class context
comment0.target=wordLengths
comment1.params=resource\ counts
comment1.target=void\ countWordLengths(edu.duke.FileResource,\ int[])
comment1.text=\r\n\ Assignment\ 1\:\ Word\ lengths\r\n\r\nYou\ will\ write\ a\ program\ to\ figure\ out\ the\ most\ common\ word\ length\ of\ words\ from\ a\ file.\r\n\ To\ solve\ this\ problem\ you\ will\ need\ to\ keep\ track\ of\ how\ many\ words\ from\ a\ file\ are\ of\ each\ possible\ length.\ \r\n\ You\ should\ group\ all\ words\ of\ length\ 30\ or\ more\ together,\ \r\n\ and\ you\ should\ not\ count\ basic\ punctuation\ that\ are\ the\ first\ or\ last\ characters\ of\ a\ group\ of\ characters.\r\n\r\nSpecifically,\ you\ should\ do\ the\ following\:\r\n\r\n\ \ \ \ Create\ a\ new\ class\ called\ WordLengths.\r\n\r\n\ \ \ \ Write\ a\ void\ method\ countWordLengths\ that\ has\ two\ parameters,\ a\ FileResource\ named\ resource\ \r\n\ \ \ \ and\ an\ integer\ array\ named\ counts.\ This\ method\ should\ read\ in\ the\ words\ from\ resource\ and\ count\ the\r\n\ \ \ \ number\ of\ words\ of\ each\ length\ for\ all\ the\ words\ in\ resource,\ storing\ these\ counts\ in\ the\ array\ counts.\r\n\ \ \ \ \r\n\ \ \ \ \ -\ For\ example,\ after\ this\ method\ executes,\ counts[k]\ should\ contain\ the\ number\ of\ words\ of\ length\ k.\r\n\r\n\ \ \ \ \ \ \ \ -\ If\ a\ word\ has\ a\ non-letter\ as\ the\ first\ or\ last\ character,\ it\ should\ not\ be\ counted\ as\ part\ of\ the\ word\ length.\ For\ example,\ \r\n\ \ \ \ \ \ \ \ the\ word\ And,\ would\ be\ considered\ of\ length\ 3\ (the\ comma\ is\ not\ counted),\ the\ word\ \u201Cblue-jeans\u201D\ would\ be\ considered\ of\ length\ 10\r\n\ \ \ \ \ \ \ \ (the\ double\ quotes\ are\ not\ counted,\ but\ the\ hyphen\ is).\ Note\ that\ we\ will\ miscount\ some\ words,\ such\ as\ \u201CHello,\u201D\ which\ will\ be\ counted\ \r\n\ \ \ \ \ \ \ \ as\ 6\ since\ we\ don\u2019t\ count\ the\ double\ quotes\ but\ will\ count\ the\ comma,\ but\ that\ is\ OK\ as\ there\ should\ not\ be\ many\ words\ in\ that\ category.\r\n\r\n\ \ \ \ \ \ \ \ -\ For\ any\ words\ equal\ to\ or\ larger\ than\ the\ last\ index\ of\ the\ counts\ array,\ count\ them\ as\ the\ largest\ size\ represented\ in\ the\ counts\ array.\r\n\r\n\ \ \ \ \ \ \ \ -\ You\ may\ want\ to\ consider\ using\ the\ Character.isLetter\ method\ that\ returns\ true\ if\ a\ character\ is\ a\ letter,\ and\ false\ otherwise.\ For\ example,\r\n\ \ \ \ \ \ \ \ Character.isLetter(\u2018a\u2019)\ returns\ true,\ and\ Character.isLetter(\u2018-\u2019)\ returns\ false.\ \r\n\r\n\ \ \ \ \r\n
comment2.params=
comment2.target=void\ testCountWordLengths()
comment2.text=\r\n\r\n\ \ \ \ \ \ \ \r\n\ \ \ \ Write\ a\ void\ method\ testCountWordLengths\ that\ creates\ a\ FileResource\ so\ you\ can\ select\ a\ file,\ and\ creates\ a\ counts\ integer\ array\ of\ size\ 31.\ This\ method\ should\ call\ countWordLengths\ with\ a\ file\ and\ then\ print\ the\ number\ of\ words\ of\ each\ length.\ Test\ it\ on\ the\ small\ file\ smallHamlet.txt\ shown\ below.\r\n\r\n\ \ \ \ Write\ a\ method\ indexOfMax\ that\ has\ one\ parameter\ named\ values\ that\ is\ an\ integer\ array.\ This\ method\ returns\ the\ index\ position\ of\ the\ largest\ element\ in\ values.\ Then\ add\ code\ to\ the\ method\ testCountWordLengths\ to\ call\ indexOfMax\ to\ determine\ the\ most\ common\ word\ length\ in\ the\ file.\ For\ example,\ calling\ indexOfMax\ after\ calling\ countWordLengths\ on\ the\ file\ smallHamlet.txt\ should\ return\ 3.\r\n\r\nFirst\ test\ your\ program\ on\ a\ small\ file,\ such\ as\ this\ simple\ file\ shown\ called\ smallHamlet.txt\:\r\n\r\n\ \ \ \ Laer.\ My\ necessaries\ are\ embark'd.\ Farewell.\r\n\r\n\ \ \ \ \ \ \ \ And,\ sister,\ as\ the\ winds\ give\ benefit\r\n\r\nNote\ this\ file\ has\ words\ that\ are\:\r\n\r\n2\ words\ of\ length\ 2\:\ My\ as\r\n\r\n3\ words\ of\ length\ 3\:\ are\ And\ the\r\n\r\n2\ words\ of\ length\ 4\:\ Laer\ give\r\n\r\n1\ word\ of\ length\ 5\:\ winds\r\n\r\n1\ word\ of\ length\ 6\:\ sister\r\n\r\n1\ word\ of\ length\ 7\:\ benefit\r\n\r\n2\ words\ of\ length\ 8\:\ embark\u2019d\ Farewell\r\n\r\n1\ word\ of\ length\ 11\:\ necessaries\r\n\r\n
numComments=3
